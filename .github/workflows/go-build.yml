name: Go Build and Release

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set Up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Go Mod Tidy
        run: go mod tidy

      - name: Clear Go Build Cache
        run: go clean -cache -testcache

      - name: Run Tests
        run: go test ./...

      - name: Build Binaries
        run: |
          set -e
          GOOS_LIST=("linux" "darwin" "windows")
          GOARCH_LIST=("amd64" "arm64")

          for GOOS in "${GOOS_LIST[@]}"; do
            for GOARCH in "${GOARCH_LIST[@]}"; do
              # Skip ignored combinations
              if [[ "$GOOS" == "darwin" && "$GOARCH" == "amd64" ]]; then
                continue
              fi
              if [[ "$GOOS" == "windows" && "$GOARCH" == "arm64" ]]; then
                continue
              fi
              
              # Format OS and Arch names
              if [[ "$GOOS" == "darwin" ]]; then
                FORMATTED_OS="Darwin"
              else
                FORMATTED_OS=$(echo "$GOOS" | tr '[:lower:]' '[:upper:]')
              fi
              
              if [[ "$GOARCH" == "amd64" ]]; then
                FORMATTED_ARCH="x86_64"
              else
                FORMATTED_ARCH="$GOARCH"
              fi
              
              BINARY_NAME="promptext-${FORMATTED_OS}-${FORMATTED_ARCH}"
              OUTPUT_FILE="${BINARY_NAME}"
              
              # Set GOOS and GOARCH for cross-compilation
              export GOOS GOARCH
              
              # Build the binary
              go build -o "$OUTPUT_FILE" -v -ldflags="-s -w" ./cmd/promptext/main.go
              echo "Built $OUTPUT_FILE"
              
              # Create archives
              if [[ "$GOOS" == "windows" ]]; then
                zip "${OUTPUT_FILE}.zip" "$OUTPUT_FILE" README.md LICENSE
              else
                tar czf "${OUTPUT_FILE}.tar.gz" "$OUTPUT_FILE" README.md LICENSE
              fi
            done
          done

      - name: Generate Checksums
        run: |
          find . -maxdepth 1 -type f -name "promptext-*" -print0 | xargs -0 sha256sum > checksums.txt

      - name: Upload Binaries as Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: promptext-binaries
          path: |
            *.zip
            *.tar.gz
            checksums.txt

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Download Binaries
        uses: actions/download-artifact@v4
        with:
          name: promptext-binaries

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload Release Assets (ZIP)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./*.zip
          asset_name: ${{ github.ref_name }}.zip
          asset_content_type: application/zip

      - name: Upload Release Assets (tar.gz)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./*.tar.gz
          asset_name: ${{ github.ref_name }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload Release Assets (checksums.txt)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./checksums.txt
          asset_name: checksums.txt
          asset_content_type: text/plain
