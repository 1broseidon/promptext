name: Go Build and Release

on:
  push:
    branches: ['main']
    tags:
      - 'v*'
  pull_request:
    branches: ['main']

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'

      - name: Run Tests
        run: go test -v ./...

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'

      - name: Go Mod Tidy
        run: go mod tidy

      - name: Build Binaries
        env:
          CGO_ENABLED: 0
        run: |
          mkdir -p dist
          for GOOS in linux darwin windows; do
            for GOARCH in amd64 arm64; do
              # Skip Windows ARM64 build
              if [[ "$GOOS" == "windows" && "$GOARCH" == "arm64" ]]; then
                continue
              fi
              
              # Format OS name
              GOOS_FORMATTED=$(echo "$GOOS" | sed -e 's/darwin/Darwin/' -e 's/linux/Linux/' -e 's/windows/Windows/')
              
              # Format architecture
              ARCH_FORMATTED=$([ "$GOARCH" == "amd64" ] && echo "x86_64" || echo "$GOARCH")
              
              # Set output names
              BINARY_NAME="promptext"
              if [[ "$GOOS" == "windows" ]]; then
                BINARY_NAME="${BINARY_NAME}.exe"
              fi
              
              DIST_NAME="promptext_${GOOS_FORMATTED}_${ARCH_FORMATTED}"
              
              echo "Building for ${GOOS}/${GOARCH}..."
              GOOS=$GOOS GOARCH=$GOARCH go build -trimpath -ldflags="-s -w" -o "dist/${BINARY_NAME}" ./cmd/promptext/main.go
              
              # Create archive
              cd dist
              if [[ "$GOOS" == "windows" ]]; then
                zip -r "${DIST_NAME}.zip" "${BINARY_NAME}" "../README.md" "../LICENSE"
              else
                tar czf "${DIST_NAME}.tar.gz" "${BINARY_NAME}" "../README.md" "../LICENSE"
              fi
              rm "${BINARY_NAME}"
              cd ..
            done
          done

      - name: Generate Checksums
        working-directory: dist
        run: |
          sha256sum * > checksums.txt

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/*
          retention-days: 1

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # This ensures we get the full git history

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          if [ -z "$PREV_TAG" ]; then
            # If no previous tag exists, use the first commit
            CHANGELOG=$(git log --pretty=format:"* %s" | grep -v '^docs:' | grep -v '^test:' | grep -v '^chore:')
          else
            # Get changes since last tag
            CHANGELOG=$(git log --pretty=format:"* %s" ${PREV_TAG}..HEAD | grep -v '^docs:' | grep -v '^test:' | grep -v '^chore:')
          fi

          # Create release with changelog
          gh release create ${{ github.ref_name }} \
            --title "Release ${{ github.ref_name }}" \
            --notes "$CHANGELOG" \
            ./dist/*
